/*
 * Здесь определяются элементы используемы в системе
 *
 *
 */

#define LEN_ID_UNIT	8					//  размер памяти для идентифкатора узла
#define	LEN_GROUP_ADR	16				// длинна группового адреса

#define DEFAULT_MULTI_ADDR  "224.0.0.20"    // адрес группового вызова по умолчанию
#define DEFAULT_MULTI_PORT  20122           // порт по умолчанию



#define LEM_MESAGE      224             // количиство символов которые содержит сообщение 

#define LEN_PKG         512             // размер пакета для передачи по сети


#define DEFAUL_UNIT_COUNT   32          // количестов узлов по умолчанию

#define MAX_UNIT_COUNT      1024        // допустиое максимальное количестов узлов всети


#define DEFAULT_TIME_REC    5           // по умолчанию период опроса 5 секунт
#define MAX_TIME_REC        120         // максимальный период опроса 


#define DEFAULT_TIVE_LOS    50          // по умолчанию период потери управления от контроллера 50 секунд
#define MAX_TIME_LOS        360         // максиальное значение в секундах допустимой потери контроллера

#define DEFAULT_INSTR       512         // размер читаемой строки


// определение структуры состояния узла/единицы в сети взаимодействия 

typedef struct {
    
    int             is_work;        // это признак используем для завершения работы ПО
    
    int             is_print;       // этот признак используется для периодического отображеня на консоль  1 - перйти в режим воода 
    
    int             is_panel;       // признак того что ститема стала контрллером 
                                    // 0 - система работает в качестве контроллера 
                                    // 1 - система работает в качестве в качестве панели
                                  
    
    int             id_num;         // идентифкатор локальной системы (для котроллера это идентификатор всегда 0)
                                    // -1 данное значение не установлено 
                                    
    int             id_num_cnt;     // идентификатор системы от которой получен запрос на предоставление данных  
                                    // устанавливается при приеме запроса если текущий выше прешедшего в запросе
                                    // служит указателем кто исполняет функции контроллера
                                    
  
    
    unsigned int    set_tick_rec;   // количестов тиков отводимых на период генерации запроса сбора данных
    
    unsigned int    set_tick_los;   // количестов тиков в чечении которых система ждет поступления запросов на чтение данных 
                                    // после истечении этого времени система попытается стать контроллером
                                    
                                    
    int             nunit;          // допустимое количестов узлов в сети                                
                                    
    float           cur_temperature;    // текущее значение температуры 
    
    float           cur_illumination;   // текущее значение осещенности  
                                    
    float           ave_temperature;    // приятые значениея среденего значения температуры ( Для отображения)
    
    float           ave_illumination;   // приянтое значение среденого значения освещенности ( Для отображения )
    
    
    int             port;               // порт для групповой передачи и приема

	char            group_adr[LEN_GROUP_ADR];   // групповая IP-адреса
    
    char            text[LEM_MESAGE];   // сообщение, если первый символ сообщенеи 0 то стобшение отсутствует
    
    
    int             sockfd;             // сокет для сети
    
    char            pkg_send[LEN_PKG];  // место подготовки и отправки пакетов
    
    char            pkg_rcv[LEN_PKG];   // место для прима и разбора пакетов
    
    char            console_bf[DEFAULT_INSTR];    // используется для вывода сообщений на консоль
    
} param_unit;


// для обмена сообщениями используется 2 вида кадров 
// кадры идентифицируются медлу собой по первым батам ( длинна int)
#define ID_CADR_REQ     0x55AA55AA      // кадр запроса
#define ID_CADR_ANS     0xAA55AA55      // кадр ответа





// определение кадра для запроса 
// в запросе мы передаем среднии показатели температуры и освещенности а также какое то тестовое сообщение 

typedef struct {
    
    int             type;                   // по данному полу распознается тип пакета
    
    int             id_num;                 // идетификатор системы отправившей сообщение 
    
    float           ave_temperature;        // значение температуры которое надо установить системе принявшей данное сообщение
    
    float           ave_illumination;       // значение освещенности которую неадо установить
    
    char            text[LEM_MESAGE];       // сообщение, если первый символ сообщенеи 0 то стобшение отсутствует
    
} req_msg;

// определение структуры кадра ответа  для устройства типа табло
// ответ содержит текущие данные температуры и освещенности 

typedef struct {

    int             type;                   // по данному полу распознается тип пакета
    
    int             id_num;                 // идетификатор системы отправившей сообщение 
     
    int             id_num_cnt;             // идентификатор системы на чей запрос этот ответ 
          
    float           cur_temperature;        // текущее значение температуры 
     
    float           cur_illumination;       // текущее значение осещенности  
    
} ans_msg;



// описание структуры данных которая храни информацию о бо всех узлах работающих всистеме
// данная информация должна хранится на каждом узле
typedef struct {

    int             tick_silence;           // число тиков молчания если это поле превышает на 2 тика величину  set_tick_los то считаем что устройство выключилось
                                            // и записываем в это поле -1, в этом случае это поле можетзабрать любое другое устройство
    
    int             id_num;                 // идетификатор системы отправившей сообщение 
     
    int             id_num_cnt;             // идентификатор системы на чей запрос этот ответ 
          
    float           cur_temperature;            // текущее значение температуры 
     
    float           cur_illumination;           // текущее значение осещенности      
} array_unit;



// основные аргоритмы работы системы расположены в ниже следжующих  подпрограммах

extern  int bool_rand();    // генерация случайного логического

extern  int task_timer_tick(param_unit*, array_unit*);

extern  int receive_msg(param_unit*, array_unit*);

extern  int console_mgm(param_unit*, array_unit*);

extern int send_req(param_unit*, array_unit* ); // отправка запроса параметров с панелей




